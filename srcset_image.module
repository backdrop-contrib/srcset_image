<?php
/**
 * @file
 * Provides responsive images that utilise the `srcset` attribute.
 */

/**
 * Implements hook_config_info().
 */
function srcset_image_config_info() {
  $prefixes['srcset_image.sets'] = array(
    'group' => t('srcset Image Sets'),
    'name_key' => 'machine_name',
    'label_key' => 'title',
  );
  return $prefixes;
}

/**
 * Implements hook_preset_types().
 */
function srcset_image_preset_types() {
  return array(
    'sets' => array(
      'name' => 'srcset Image Set',
      'path' => 'admin/config/media/srcset-image',
      'path_title' => 'srcset Image',
      'path_description' => 'Configure srcset Image.',
      'id_name' => 'Name',
      'columns' => array(
        'image_styles' => 'Image styles',
      ),
      'group' => t('srcset Image Sets'),
    ),
  );
}

/**
 * Implements hook_preset_form().
 */
function srcset_image_preset_form($preset_type, $id) {
  $form = array();

  // Get default values.
  if ($id) {
    $config = config_get("srcset_image.$preset_type.$id");
  }

  // Get image styles as options for checkboxes.
  $options = array();
  foreach (image_styles() as $image_style) {
    $options[$image_style['name']] = $image_style['label'];
  }

  if ($preset_type == 'sets') {
    $form['image_styles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Image styles'),
      '#description' => t('Select the image styles that make up this image set.'),
      '#options' => $options,
      '#default_value' => isset($config['image_styles']) ? $config['image_styles'] : array(),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_theme().
 */
function srcset_image_theme($existing, $type, $theme, $path) {
  return array(
    'srcset_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'image_set' => '',
        'original' => TRUE,
        'sizes' => '100vw',
        'link' => '',
        'image_load' => 'default',
      ),
      'file' => 'srcset_image.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function srcset_image_field_formatter_info() {
  return array(
    'srcset_image' => array(
      'label' => t('srcset Image'),
      'field types' => array('image'),
      'settings' => array(
        'srcset_image_set' => '',
        'srcset_image_original' => TRUE,
        'srcset_image_sizes' => '100vw',
        'srcset_image_link' => '',
        'srcset_image_load' => 'default',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function srcset_image_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_sets = array();

  // Load all sets.
  $filenames = config_get_names_with_prefix('srcset_image.sets');
  foreach ($filenames as $filename) {
    $config = config($filename);
    $name = $config->get('machine_name');
    $set = $config->get();
    $sets[$name] = $set;
  }
  foreach ($sets as $machine_name => $set) {
    $image_sets[$machine_name] = $set['title'];
  }
  $element['srcset_image_set'] = array(
    '#type' => 'select',
    '#title' => t('Image set'),
    '#options' => $image_sets,
    '#default_value' => $settings['srcset_image_set'],
    '#empty_option' => t('- None -'),
  );

  $element['srcset_image_original'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include original image'),
    '#description' => t('Whether or not the original (i.e. non-image-style version) should be included in the srcset attribute.'),
    '#default_value' => $settings['srcset_image_original'],
  );

  $element['srcset_image_sizes'] = array(
    '#type' => 'textfield',
    '#title' => t('Sizes'),
    '#description' => t("This field is used as the value of the 'sizes' attribute and defaults to 100% of the viewport width."),
    '#default_value' => $settings['srcset_image_sizes'],
    '#states' => array(
      'invisible' => array(
        ':input[name$="[srcset_image_set]"]' => array('value' => ''),
      ),
    ),
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['srcset_image_link'] = array(
    '#type' => 'select',
    '#title' => t('Link image to'),
    '#options' => $link_types,
    '#default_value' => $settings['srcset_image_link'],
    '#empty_option' => t('Nothing'),
  );

  if (!isset($settings['srcset_image_load'])) {
    $settings['srcset_image_load'] = 'default';
  }

  $element['srcset_image_load'] = array(
    '#title' => t('Image loading'),
    '#type' => 'radios',
    '#default_value' => $settings['srcset_image_load'],
    '#options' => array(
      'lazy' => t('Lazy'),
      'default' => t('Default'),
      'eager' => t('Eager'),
    ),
  );
  $element['srcset_image_load']['lazy']['#description'] = t('Defer loading offscreen images until viewers scroll nearby. "Nearby" is determined by each browser.');
  $element['srcset_image_load']['default']['#description'] = t('Browser will load images in the usual way.');
  $element['srcset_image_load']['eager']['#description'] = t('Load this image immediately, regardless of where it is located on the page.');

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function srcset_image_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  if (!empty($settings['srcset_image_set'])) {
    $summary[] = t('Image set: @image_set', array('@image_set' => $settings['srcset_image_set']));

    if (!empty($settings['srcset_image_sizes'])) {
      $summary[] = t('Sizes: @sizes', array('@sizes' => filter_xss($settings['srcset_image_sizes'])));
    }
  }
  else {
    $summary[] = t('No image set selected.');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  if (!empty($link_types[$settings['srcset_image_link']])) {
    $summary[] = $link_types[$settings['srcset_image_link']];
  }

  if (!empty($settings['srcset_image_load']) && $settings['srcset_image_load'] != 'default') {
    $summary[] = t('Loading: @speed', array('@speed' => $settings['srcset_image_load']));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function srcset_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  // Load image set.
  if (!empty($settings['srcset_image_set'])) {
    $image_set = config_get('srcset_image.sets.' . $settings['srcset_image_set']);
  }
  else {
    $image_set = array();
  }

  // Get URI of entity to link to.
  if ($settings['srcset_image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($settings['srcset_image_link'] == 'file') {
    $link_file = TRUE;
  }

  // Get loading speed setting.
  $image_load = (!empty($settings['srcset_image_load'])) ? $settings['srcset_image_load'] : 'default';

  foreach ($items as $delta => $item) {
    // Get URI of file to link to.
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }

    // Call theme function for output.
    $element[$delta] = array(
      '#theme' => 'srcset_image_formatter',
      '#item' => $item,
      '#image_set' => $image_set,
      '#original' => $settings['srcset_image_original'],
      '#sizes' => filter_xss($settings['srcset_image_sizes']),
      '#link' => isset($uri) ? $uri : '',
      '#image_load' => $image_load,
    );
  }

  return $element;
}
